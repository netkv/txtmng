#!/bin/bash
## insert-array
# Insert array values into different array
function insert-array {
	local -n source="$1"
	local -n target="$2"
	for idx in "${!source[@]}"; {
		target["${idx}"]="${source[${idx}]}"
	}
}

function insert {
	read -r -d '' "insert[${1}]"
}

# color changing function helper
function brighten {
	local -i c
	result="$(
		c=$((16#${1:0:2} + 16#${2:0:2}))
		((c>255)) && printf 'ff\n' || printf "%02x\n" $c
	)$(
		c=$((16#${1:2:2} + 16#${2:2:2}))
		((c>255)) && printf 'ff\n' || printf "%02x\n" $c
	)$(
		c=$((16#${1:4:2} + 16#${2:4:2}))
		((c>255)) && printf 'ff\n' || printf "%02x\n" $c
	)"
	echo "$result"
}
function darken {
	local -i c
	result="$(
		c=$((16#${1:0:2} - 16#${2:0:2}))
		((c<0)) && printf '00\n' || printf "%02x\n" $c
	)$(
		c=$((16#${1:2:2} - 16#${2:2:2}))
		((c<0)) && printf '00\n' || printf "%02x\n" $c
	)$(
		c=$((16#${1:4:2} - 16#${2:4:2}))
		((c<0)) && printf '00\n' || printf "%02x\n" $c
	)"
	echo "$result"
}
function average {
	local -i c
	result="$(
		c=$(((16#${1:0:2} + 16#${2:0:2}) / 2))
		printf "%02x\n" $c
	)$(
		c=$(((16#${1:2:2} + 16#${2:2:2}) / 2))
		printf "%02x\n" $c
	)$(
		c=$(((16#${1:4:2} + 16#${2:4:2}) / 2))
	    printf "%02x\n" $c
	)"
	echo "$result"
}

function generate-bright {
	lvl="$1"
	prefix="$2"
	new_prefix="$3"
	shift 3
	for color in "$@"; do
		rules+=(["${new_prefix}${color}"]="$(brighten "${rules["${prefix}${color}"]}" "$lvl")")
	done
}

function to-rgb {
	r="${1:0:2}"
	g="${1:2:2}"
	b="${1:4:2}"
	[ -z "$1" ] && exit 1
	printf "rgba(%s, %s, %s, %s)\n" "$((16#$r))" "$((16#$g))" "$((16#$b))" "${2:-1}"
}

## prepare enviroment for sourcing config
IFS=

declare rulefile
if test -f "./.txtmng"; then
	rulefile="./.txtmng"
elif test -f "${HOME}/.txtmng"; then
	rulefile="${HOME}/.txtmng"
	cd ~ || exit 1
elif test -f "${HOME}/.txtmng.d/rules"; then
	rulefile="${HOME}/.txtmng.d/rules"
	cd ~ || exit 1
else
	exit 1
fi
printf '\e[1;4mUsing file:\e[0m \e[1m%s\e[m\n' "${rulefile}"

declare -a files
declare -A rules insert templates config

## source it
source "${rulefile}"

## integrated templates
for file in "${!insert[@]}"; do
	printf 'Place: \e[1;4m%s\e[0m\n' "${file}"
	printf '%s' "${insert[${file}]}" > "${file}"
done

## in place templates
for file in "${files[@]}"; do
	if test -f "${file}.template"; then
		template_source="${file}.template"
	elif test -f "${file%/*}/template.${file##*/}"; then
		template_source="${file%/*}/template.${file##*/}"
	else
		printf '\e[1;31m%s\n' "1: Error: template file is missing ( ${file}.template / ${file%/*}/template.${file##*/} )"
		exit 1 # if file doesn't exist, something is very wrong and data could be harmed
	fi
	
	if [ ! -f "${template_source}" ]; then # double check to be safe
		printf '\e[1;91m%s\n' "2: Error: template file is missing ( ${template_source} )"
		exit 1 # if file doesn't exist, something is very wrong and data could be harmed
	fi
	
	printf 'Edit: \e[4m%s\e[0m \e[2m-->\e[0m \e[1;4m%s\e[0m\n' "${template_source}" "${file}"

	expr=''
	for rule in "${!rules[@]}"; do
		expr+="s/${rule}/${rules[${rule}]}/g;"
	done
	sed "${expr}" "${template_source}" > "${file}"
done

## template directory
[ -z "${config[template-dir]}" ] && exit 
[ ! -d "${config[template-dir]}" ] && exit
printf "\e[1;4mTemplate source:\e[0m \e[1m%s\e[0m\n" "${config[template-dir]}"
for file in "${!templates[@]}"; do
	# if file doesn't exist, something is very wrong and data could be harmed
	test -f "${config[template-dir]}/${file}" || exit 25
	printf "Template: \e[0;4m%s\e[0m \e[2m-->\e[0m \e[1;4m%s\e[0m\n" "${file}" "${templates[${file}]}"

	expr=''
	for rule in "${!rules[@]}"; do
		expr+="s/${rule}/${rules[${rule}]}/g;"
	done
	sed "${expr}" "${config[template-dir]}/${file}" > "${templates[${file}]}"
done
